=======================
``add_integer`` module
=======================

Using ``add_integer`` with two variables ``a`` and ``b``, where both variables
must be an integer or a float (which will be converted to an integer)
-------------------

Import:
    >>> add_integer = __import__('0-add_integer').add_integer

Addition of two integers:
    >>> add_integer(5, 10)
    15

Addition of a positive and a negative integer:
    >>> add_integer(-3, 7)
    4

Addition of two floating-point values:
    >>> add_integer(3.2, 2.5)
    5

Note that floats are cast to ints before addition is performed.

Addition of two floating-point values with decimal parts:
    >>> add_integer(2.9, 0.1)
    2

Addition of a negative floating-point value and a negative integer:
    >>> add_integer(-2.5, -0.5)
    -2

Addition of a floating-point value and a negative integer:
    >>> add_integer(4.7, -2)
    2

Addition with the second argument as optional (default value is 98):
    >>> add_integer(7)
    105

Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

Passing a string as the first argument:
    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

Passing a string as the second argument:
    >>> add_integer(2, "world")
    Traceback (most recent call last):
    TypeError: b must be an integer

Passing None as the first argument:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Passing None as the second argument:
    >>> add_integer(2.5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

Passing non-integer and non-float values as both arguments:
    >>> add_integer("hello", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

Handling Infinity
================

The function will fail if infinity is provided.

Passing infinity as the only argument:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Passing infinity as the second argument:
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Handling NaN (Not a Number)
===========================

The function will fail if NaN is provided.

Passing NaN as the only argument:
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Passing NaN as the second argument:
    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
